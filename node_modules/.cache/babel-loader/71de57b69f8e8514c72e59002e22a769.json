{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antoni\\\\Desktop\\\\target-pathfinder\\\\src\\\\components\\\\Pathfind.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport \"./Pathfind.css\";\nimport Astar from \"../astarAlgorithm/astar.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cols = 12;\nconst rows = 10;\nconst NODE_START_ROW = rows - 1;\nconst NODE_START_COL = cols - 2;\nconst NODE_END_ROW = 1;\nconst NODE_END_COL = 1;\nlet Goal_Nodes_ROW = [1, 4];\nlet Goal_Nodes_COL = [1, 8];\n\nconst Pathfind = () => {\n  _s();\n\n  const [Grid, setGrid] = useState([]);\n  const [Path, setPath] = useState([]);\n  useEffect(() => {\n    initializeGrid();\n  });\n\n  const initializeGrid = () => {\n    const grid = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = new Array(cols);\n    }\n\n    createSpot(grid);\n    setGrid(grid);\n    addNeighbors(grid);\n    minIndex = 0;\n    let minRow = Goal_Nodes_ROW[0];\n    let minCol = Goal_Nodes_Col[0];\n    let minDistance = Math.abs(minRow - NODE_START_ROW) + Math.abs(minCol - NODE_START_COL);\n\n    while (Goal_Nodes_ROW.length > 0) {\n      let minRow = Goal_Nodes_ROW[0];\n      let minCol = Goal_Nodes_Col[0];\n\n      for (let i = 0; i < Goal_Nodes_ROW.length; i++) {\n        let y = Goal_Nodes_ROW[i];\n        let x = Goal_Nodes_COL[i];\n        let distance = Math.abs(y - NODE_START_ROW) + Math.abs(x - NODE_START_COL);\n\n        if (distance < minDistance) {\n          minIndex = i;\n        }\n      }\n    }\n\n    const startNode = grid[NODE_START_ROW][NODE_START_COL];\n    const endNode = grid[NODE_END_ROW][NODE_END_COL];\n    let path = Astar(startNode, endNode);\n    startNode.isWall = false;\n    endNode.isWall = false;\n    setPath(path);\n    Astar(startNode, endNode);\n  };\n\n  const createSpot = grid => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n  };\n\n  const gridwithNode = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Grid.map((row, rowIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rowWrapper\",\n        children: row.map((col, colIndex) => {\n          const {\n            isStart,\n            isEnd,\n            isWall\n          } = col;\n          return /*#__PURE__*/_jsxDEV(Node, {\n            isStart: isStart,\n            isEnd: isEnd,\n            row: rowIndex,\n            col: colIndex,\n            isWall: isWall\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n\n  const visualizePath = () => {\n    for (let i = 0; i < Path.length; i++) {\n      const node = Path[i];\n      document.getElementById(`node-${node.x}-${node.y}`).className = 'node node-shortest-path';\n    }\n\n    console.log(\"Visualizing\");\n  };\n\n  console.log(Path);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: visualizePath,\n      children: \"Visualize Path\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pathfind component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), gridwithNode]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Pathfind, \"HifuWqxRubfjLDbSVUh0XVnv3CU=\");\n\n_c = Pathfind;\n\nconst addNeighbors = grid => {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      grid[i][j].addneighbors(grid);\n    }\n  }\n};\n\nfunction getAisles(x, y) {\n  let isWall = false;\n\n  if (y == 0 || y == cols - 1) {\n    isWall = true;\n  }\n\n  if (x == 0 || x == rows - 1) {\n    isWall = true;\n  }\n\n  if (x == 2 || x == 3 || x == 5 || x == 6) {\n    if (y >= 2 && y <= 4) {\n      isWall = true;\n    }\n\n    if (y >= 6 && y <= 9) {\n      isWall = true;\n    }\n  }\n\n  return isWall;\n}\n\nfunction Spot(i, j) {\n  this.x = i;\n  this.y = j;\n  this.isStart = this.x === NODE_START_ROW && this.y === NODE_START_COL;\n  this.isEnd = this.x === NODE_END_ROW && this.y === NODE_END_COL;\n  this.g = 0;\n  this.f = 0;\n  this.h = 0;\n  this.neighbors = [];\n  this.isWall = getAisles(i, j); // this.isWall = false;\n  // if(Math.random(1) < 0.2){\n  //     this.isWall = true;\n  // }\n\n  this.previous = undefined;\n\n  this.addneighbors = function (grid) {\n    let i = this.x;\n    let j = this.y;\n    if (i > 0) this.neighbors.push(grid[i - 1][j]);\n    if (i < rows - 1) this.neighbors.push(grid[i + 1][j]);\n    if (j > 0) this.neighbors.push(grid[i][j - 1]);\n    if (j < cols - 1) this.neighbors.push(grid[i][j + 1]);\n  };\n}\n\n_c2 = Spot;\nexport default Pathfind;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Pathfind\");\n$RefreshReg$(_c2, \"Spot\");","map":{"version":3,"sources":["C:/Users/Antoni/Desktop/target-pathfinder/src/components/Pathfind.js"],"names":["React","useState","useEffect","Node","Astar","cols","rows","NODE_START_ROW","NODE_START_COL","NODE_END_ROW","NODE_END_COL","Goal_Nodes_ROW","Goal_Nodes_COL","Pathfind","Grid","setGrid","Path","setPath","initializeGrid","grid","Array","i","createSpot","addNeighbors","minIndex","minRow","minCol","Goal_Nodes_Col","minDistance","Math","abs","length","y","x","distance","startNode","endNode","path","isWall","j","Spot","gridwithNode","map","row","rowIndex","col","colIndex","isStart","isEnd","visualizePath","node","document","getElementById","className","console","log","addneighbors","getAisles","g","f","h","neighbors","previous","undefined","push"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport Node from  \"./Node\"\r\nimport \"./Pathfind.css\"\r\nimport Astar from \"../astarAlgorithm/astar.js\"\r\n\r\nconst cols = 12;\r\nconst rows = 10;\r\n\r\n\r\nconst NODE_START_ROW = rows-1;\r\nconst NODE_START_COL = cols-2;\r\nconst NODE_END_ROW = 1;\r\nconst NODE_END_COL = 1;\r\nlet Goal_Nodes_ROW = [1,4]\r\nlet Goal_Nodes_COL = [1,8]\r\n\r\nconst Pathfind = () =>{\r\n\r\n    const [Grid, setGrid] = useState([]);\r\n    const [Path, setPath] = useState([]);\r\n\r\n    useEffect(() => {\r\n        initializeGrid();\r\n    });\r\n\r\n    const initializeGrid = () =>{\r\n        const grid = new Array(rows);\r\n        for(let i = 0; i < rows; i++){\r\n            grid[i] = new Array(cols);\r\n        }\r\n        createSpot(grid);\r\n        setGrid(grid);\r\n        addNeighbors(grid);\r\n\r\n        minIndex = 0;\r\n        let minRow = Goal_Nodes_ROW[0];\r\n        let minCol = Goal_Nodes_Col[0];\r\n        let minDistance = Math.abs(minRow-NODE_START_ROW) + Math.abs(minCol-NODE_START_COL);\r\n        while(Goal_Nodes_ROW.length > 0){\r\n            let minRow = Goal_Nodes_ROW[0];\r\n            let minCol = Goal_Nodes_Col[0];\r\n            for(let i =0; i<Goal_Nodes_ROW.length; i++){\r\n                let y = Goal_Nodes_ROW[i];\r\n                let x = Goal_Nodes_COL[i];\r\n                let distance = Math.abs(y-NODE_START_ROW) + Math.abs(x-NODE_START_COL);\r\n                if(distance < minDistance){\r\n                    minIndex = i;\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        const startNode = grid[NODE_START_ROW][NODE_START_COL];\r\n        const endNode = grid[NODE_END_ROW][NODE_END_COL];\r\n        let path = Astar(startNode, endNode);\r\n        startNode.isWall = false;\r\n        endNode.isWall = false;\r\n        setPath(path);\r\n        Astar(startNode, endNode);\r\n    };\r\n\r\n    const createSpot = (grid) =>{\r\n        for(let i=0; i< rows; i++){\r\n            for(let j=0; j < cols; j++){\r\n                grid[i][j] = new Spot(i, j)\r\n            }\r\n        }\r\n    }\r\n\r\n    const gridwithNode = (\r\n        <div>\r\n            {Grid.map((row, rowIndex) => {\r\n                return (\r\n                    <div key={rowIndex} className=\"rowWrapper\">\r\n                        {row.map((col, colIndex) => {\r\n                            const {isStart, isEnd, isWall} = col;\r\n                            return(\r\n                                <Node key={colIndex} isStart={isStart} isEnd={isEnd} row={rowIndex} col={colIndex} isWall={isWall}/>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n\r\n\r\n    const visualizePath = () => {\r\n        for(let i=0; i<Path.length; i++){\r\n            const node = Path[i];\r\n            document.getElementById(`node-${node.x}-${node.y}`).className = 'node node-shortest-path'\r\n        }\r\n        console.log(\"Visualizing\")\r\n    }\r\n\r\n    console.log(Path);\r\n    return(\r\n        <div className=\"Wrapper\">\r\n        <button onClick={visualizePath}>Visualize Path</button>\r\n            <h1>Pathfind component</h1>\r\n            {gridwithNode}\r\n        </div>\r\n        );  \r\n};\r\n\r\nconst addNeighbors = (grid) => {\r\n    for(let i=0; i< rows; i++){\r\n        for (let j=0; j< cols; j++){\r\n            grid[i][j].addneighbors(grid);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getAisles(x, y){\r\n    let isWall = false;\r\n    if (y == 0 || y== cols-1 ){\r\n        isWall = true;\r\n    }\r\n    if(x == 0 || x == rows -1){\r\n        isWall = true;\r\n    }\r\n    if(x == 2 || x ==3 || x == 5 || x == 6){\r\n        if( y >=2 && y<=4){\r\n            isWall = true;\r\n        }\r\n        if(y >= 6 && y <=9 ){\r\n            isWall = true;\r\n        }\r\n    }\r\n    return isWall;\r\n}\r\n\r\nfunction Spot(i, j){\r\n    this.x = i;\r\n    this.y = j;\r\n    this.isStart = this.x === NODE_START_ROW  && this.y === NODE_START_COL;\r\n    this.isEnd = this.x === NODE_END_ROW && this.y === NODE_END_COL;\r\n    this.g = 0;\r\n    this.f = 0;\r\n    this.h = 0;\r\n    this.neighbors = [];\r\n    this.isWall = getAisles(i, j);\r\n    // this.isWall = false;\r\n    // if(Math.random(1) < 0.2){\r\n    //     this.isWall = true;\r\n    // }\r\n    this.previous = undefined;\r\n    this.addneighbors = function(grid){\r\n        let i = this.x;\r\n        let j = this.y;\r\n        if(i > 0) this.neighbors.push(grid[i-1][j])\r\n        if(i < rows - 1) this.neighbors.push(grid[i+1][j])\r\n        if(j > 0) this.neighbors.push(grid[i][j-1]);\r\n        if(j < cols - 1) this.neighbors.push(grid[i][j+1]);\r\n    };\r\n}\r\n\r\nexport default Pathfind;"]},"metadata":{},"sourceType":"module"}